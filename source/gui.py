import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from source.visualize_1d import (
    draw_1d_canvas, draw_1d_grid, draw_1d_bar_chart,
    draw_1d_spiral
)
from source.visualize_2d import draw_model_2d
from source.database import create_and_fill_db, DB_PATH
import sqlite3


def run_app():
    create_and_fill_db()
    root = tk.Tk()
    root.title("HMM modeling")
    root.geometry("1100x700")

    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
    root.update_idletasks()
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    window_width = root.winfo_reqwidth()
    window_height = root.winfo_reqheight()
    root.geometry(f"+{(screen_width//2 - window_width//2)}+{(screen_height//2 - window_height//2)}")

    notebook = ttk.Notebook(root)
    notebook.pack(fill='both', expand=True)

    # === –í–ö–õ–ê–î–ö–ê 1D ===
    frame_1d = ttk.Frame(notebook)
    notebook.add(frame_1d, text="1D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")

    params_1d = tk.Frame(frame_1d)
    params_1d.pack(side="left", fill="y", padx=10, pady=10)

    def int_field(label, default):
        tk.Label(params_1d, text=label).pack(anchor="w")
        var = tk.StringVar(value=str(default))
        tk.Entry(params_1d, textvariable=var).pack(fill="x", pady=2)
        return var

    a_var = int_field("–ù–∞—á–∞–ª–æ (a)", 5)
    d_var = int_field("–®–∞–≥ (d)", 3)
    n_var_1d = int_field("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (n)", 100)
    def regenerate_1d():
        try:
            a = int(a_var.get())
            d = int(d_var.get())
            n = int(n_var_1d.get())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            return
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("DELETE FROM numbers WHERE type = '1D'")
        for i in range(n):
            val = a + i * d
            cur.execute("INSERT INTO numbers (value, type) VALUES (?, '1D')", (val,))
        conn.commit()
        conn.close()
        draw_1d_canvas(canvas_1d)

    tk.Button(params_1d, text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", command=regenerate_1d).pack(pady=10, fill="x")

    # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è 1D
    def show_1d_help():
        help_win = tk.Toplevel(root)
        help_win.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ 1D –º–æ–¥–µ–ª—è–º")
        help_win.geometry("600x400")
        help_win.update_idletasks()
        screen_width = help_win.winfo_screenwidth()
        screen_height = help_win.winfo_screenheight()
        x = (screen_width // 2) - (600 // 2)
        y = (screen_height // 2) - (290 // 2)
        help_win.geometry(f"600x290+{x}+{y}")
        help_win.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ 1D –º–æ–¥–µ–ª—è–º")
        help_text = """
    1D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - a: –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    - d: —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
    - n: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:
    1. –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π
    2. –ó–∞–º–æ—â–µ–Ω–∏–µ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ü–≤–µ—Ç–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –≤ —Å–µ—Ç–∫–µ
    3. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π
    4. –¶–≤–µ—Ç–æ–≤–∞—è —Å–ø–∏—Ä–∞–ª—å - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ –≤–∏–¥–µ —Å–ø–∏—Ä–∞–ª–∏ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

    –î–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–ø–∏—Ä–∞–ª–∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–ª–∞–≤–∏—à—É Ctrl –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–π—Ç–µ –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏
    """
        tk.Label(help_win, text=help_text, justify="left", padx=20, pady=20).pack()
        help_win.transient(root)


    tk.Button(params_1d, text="üìò –°–ø—Ä–∞–≤–∫–∞ 1D", command=show_1d_help).pack(pady=5, fill="x")

    canvas_frame_1d = tk.Frame(frame_1d)
    canvas_frame_1d.pack(side="left", fill="both", expand=True, padx=10)
    canvas_1d = tk.Canvas(canvas_frame_1d, bg="white")
    canvas_1d.pack(fill='both', expand=True)


    btns_frame = tk.Frame(canvas_frame_1d)
    btns_frame.pack(pady=5)
    tk.Button(btns_frame, text="–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–∞—è –ª–µ–Ω—Ç–∞", command=lambda: draw_1d_canvas(canvas_1d)).grid(row=0, column=0, padx=5)
    tk.Button(btns_frame, text="–ó–∞–º–æ—â–µ–Ω–∏–µ", command=lambda: draw_1d_grid(canvas_1d)).grid(row=0, column=1, padx=5)
    tk.Button(btns_frame, text="–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", command=lambda: draw_1d_bar_chart(canvas_1d)).grid(row=0, column=2, padx=5)

    def draw_spiral_with_scale():
        try:
            scale_percent = int(100)
            if scale_percent <= 0:
                raise ValueError
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö")
            return
        draw_1d_spiral(canvas_1d)

    tk.Button(btns_frame, text="–¶–≤–µ—Ç–æ–≤–∞—è —Å–ø–∏—Ä–∞–ª—å", command=draw_spiral_with_scale).grid(row=0, column=3, padx=5)


    # === –í–ö–õ–ê–î–ö–ê 2D ===
    frame_2d = ttk.Frame(notebook)
    notebook.add(frame_2d, text="2D-–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")

    controls_frame = tk.Frame(frame_2d)
    controls_frame.pack(side="left", fill="y", padx=10, pady=10)

    tk.Label(controls_frame, text="–ú–æ–¥–µ–ª—å:").pack(anchor="w")
    model_var = tk.StringVar(value="LenNOD")
    model_box = ttk.Combobox(controls_frame, textvariable=model_var,
                             values=["LenNOD", "Ker", "SUM", "MOD"])
    model_box.pack(fill="x", pady=5)

    def float_entry(label_text, default):
        tk.Label(controls_frame, text=label_text).pack(anchor="w")
        var = tk.StringVar(value=str(default))
        tk.Entry(controls_frame, textvariable=var).pack(fill="x", pady=2)
        return var

    ymax_var = float_entry("Ymax=", 10)
    ymin_var = float_entry("Ymin=", 1)
    xmax_var = float_entry("Xmax=", 10)
    xmin_var = float_entry("Xmin=", 1)
    n_var = float_entry("N=", 20)
    aspect_var = float_entry("Aspect=", 1.0)

    show_values = tk.BooleanVar(value=True)
    tk.Checkbutton(controls_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è", variable=show_values).pack(anchor="w")
    show_grid = tk.BooleanVar(value=False)
    tk.Checkbutton(controls_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ—Ç–∫—É", variable=show_grid).pack(anchor="w")

    canvas_frame = tk.Frame(frame_2d)
    canvas_frame.pack(side="left", fill="both", expand=True, padx=10, pady=10)
    canvas_2d = tk.Canvas(canvas_frame, bg="white", width=700, height=500)
    canvas_2d.grid(row=0, column=0, sticky="nsew")
    vsb = tk.Scrollbar(canvas_frame, orient="vertical", command=canvas_2d.yview)
    vsb.grid(row=0, column=1, sticky="ns")
    hsb = tk.Scrollbar(canvas_frame, orient="horizontal", command=canvas_2d.xview)
    hsb.grid(row=1, column=0, sticky="ew")
    canvas_2d.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
    canvas_frame.grid_rowconfigure(0, weight=1)
    canvas_frame.grid_columnconfigure(0, weight=1)

    formula_label = tk.Label(frame_2d, text="HMM = ...", font=("Arial", 12))
    formula_label.pack(pady=2)

    def on_calculate():
        try:
            xmin = float(xmin_var.get())
            xmax = float(xmax_var.get())
            ymin = float(ymin_var.get())
            ymax = float(ymax_var.get())
            n = int(float(n_var.get()))
            aspect = float(aspect_var.get())
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return

        model = model_var.get()
        formula_map = {
            "LenNOD": "HMM = lenNOD(x,y)",
            "Ker": "HMM = ker(x*y)",
            "SUM": "HMM = int(x + y)",
            "MOD": "HMM = x % y"
        }
        formula_label.config(text=formula_map.get(model, "HMM = ..."))

        draw_model_2d(
            canvas=canvas_2d,
            xmin=xmin, xmax=xmax,
            ymin=ymin, ymax=ymax,
            n_cells=n, aspect=aspect,
            show_values=show_values.get(),
            show_grid=show_grid.get(),
            model=model
        )

    buttons_frame = tk.Frame(frame_2d)
    buttons_frame.pack(side="bottom", fill="x", pady=10)

    def show_2d_help():
        help_win = tk.Toplevel(root)
        help_win.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ 2D –º–æ–¥–µ–ª—è–º")
        help_win.geometry("600x400")
        help_win.update_idletasks()
        screen_width = help_win.winfo_screenwidth()
        screen_height = help_win.winfo_screenheight()
        x = (screen_width // 2) - (500 // 2)
        y = (screen_height // 2) - (290 // 2)
        help_win.geometry(f"500x290+{x}+{y}")
        help_win.title("–°–ø—Ä–∞–≤–∫–∞ –ø–æ 2D –º–æ–¥–µ–ª—è–º")
        help_text = """
    2D –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:
    1. LenNOD - –¥–ª–∏–Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞ –¥–ª—è –ø–∞—Ä—ã —á–∏—Å–µ–ª (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤)
    2. Ker - —è–¥—Ä–æ —á–∏—Å–ª–∞ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–∏—Å–µ–ª)
    3. SUM - —Å—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª
    4. MOD - –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - Xmin/Xmax - –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –æ—Å–∏ X
    - Ymin/Ymax - –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –æ—Å–∏ Y
    - N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è—á–µ–µ–∫
    - Aspect - —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à–∏—Ä–∏–Ω–∞/–≤—ã—Å–æ—Ç–∞)
    """
        tk.Label(help_win, text=help_text, justify="left", padx=20, pady=20).pack()
        help_win.transient(root)

    tk.Button(controls_frame, text="üìò –°–ø—Ä–∞–≤–∫–∞ 2D", command=show_2d_help).pack(pady=5, fill="x")

    tk.Button(buttons_frame, text="üîÑ –†–∞—Å—á—ë—Ç", command=on_calculate).pack(side="left", padx=10)
    tk.Button(buttons_frame, text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", command=root.quit).pack(side="right", padx=10)

    # –ú–µ–Ω—é
    menubar = tk.Menu(root)
    root.config(menu=menubar)
    menu_data = tk.Menu(menubar, tearoff=0)


    menu_data.add_separator()
    menu_data.add_command(label="–í—ã—Ö–æ–¥", accelerator="Ctrl+X", command=root.quit)
    menubar.add_cascade(label="–§–∞–π–ª", menu=menu_data)

    menu_help = tk.Menu(menubar, tearoff=0)
    menu_help.add_command(
        label="–°–ø—Ä–∞–≤–∫–∞",
        accelerator="F1",
        command=lambda: messagebox.showinfo(
            "–°–ø—Ä–∞–≤–∫–∞",
            "–•—Ä–æ–º–æ–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
            "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n"
            "  F1         ‚Äî –°–ø—Ä–∞–≤–∫–∞\n"
            "  Ctrl+F1    ‚Äî –û –ø—Ä–æ–≥—Ä–∞–º–º–µ\n"
            "  F2         ‚Äî –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1D (—Å—Ç–æ–ª–±—Ü—ã, —Å–µ—Ç–∫–∞, —Å–ø–∏—Ä–∞–ª—å, —Ç–æ—á–∫–∏)\n"
            "  F5         ‚Äî –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 2D (–∞–Ω–∞–ª–∏–∑ Ker –∏ LenNOD)\n"
            "  Esc        ‚Äî –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"
            "–û–ø–∏—Å–∞–Ω–∏–µ:\n"
            "1D ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è)\n"
            "2D ‚Äî –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–µ (Ker, LenNOD)\n"
            "–í—ã—Ä–∞–∂–∞—é –æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º - –ü–æ–ø–æ–≤–æ–π –û–ª—å–≥–µ –∏ –ü–æ–ø–æ–≤—É –°–µ–º–µ–Ω—É "
            "–∑–∞ —Ö–æ—Ä–æ—à–µ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ, –∑–∞–±–æ—Ç—É, –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ï—â–µ —Ä–∞–∑ –±–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –æ—Ç –≤—Å–µ–≥–æ —Å–µ—Ä–¥—Ü–∞ "
            "–∑–∞ –≤–∞—à—É –≤–µ—Ä—É –≤ –º–µ–Ω—è –∏ –≤–∞—à—É –Ω–µ–æ—Ü–µ–Ω–∏–º—É—é –ø–æ–º–æ—â—å."
        )
    )

    menu_help.add_command(
        label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
        accelerator="Ctrl+F1",
        command=lambda: messagebox.showinfo(
            "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
            "–•—Ä–æ–º–æ–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
            "–í–µ—Ä—Å–∏—è 4.0\n\n"
            "–ê–≤—Ç–æ—Ä: –ì–æ–ª—É–±–µ–≤–∞ –ï.–°.\n"
            "–ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n"
            "–ì–æ–¥: 2025\n\n"
            "–û–±—ä–µ–∫—Ç 1D:\n"
            "‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —É–∑–æ—Ä–æ–≤\n\n"
            "–û–±—ä–µ–∫—Ç 2D:\n"
            "‚Äî –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä —á–∏—Å–µ–ª —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏\n\n"
            "–ú–æ–¥–µ–ª–∏:\n"
            "‚Äî Ker(x * y): —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n"
            "‚Äî LenNOD(x, y): –¥–ª–∏–Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤)"
        )
    )
    menubar.add_cascade(label="–°–ø—Ä–∞–≤–∫–∞", menu=menu_help)
    root.bind("<F2>", lambda e: notebook.select(frame_1d))
    root.bind("<F5>", lambda e: notebook.select(frame_2d))
    root.bind("<Escape>", lambda e: root.quit())
    root.bind("<Control-x>", lambda e: root.quit())
    root.bind("<F1>", lambda e: messagebox.showinfo(
        "–°–ø—Ä–∞–≤–∫–∞",
        "–•—Ä–æ–º–æ–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n"
        "–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:\n"
        "  F1         ‚Äî –°–ø—Ä–∞–≤–∫–∞\n"
        "  Ctrl+F1    ‚Äî –û –ø—Ä–æ–≥—Ä–∞–º–º–µ\n"
        "  F2         ‚Äî –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 1D (—Å—Ç–æ–ª–±—Ü—ã, —Å–µ—Ç–∫–∞, —Å–ø–∏—Ä–∞–ª—å, —Ç–æ—á–∫–∏)\n"
        "  F5         ‚Äî –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 2D (–∞–Ω–∞–ª–∏–∑ Ker –∏ LenNOD)\n"
        "  Esc        ‚Äî –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"
        "–û–ø–∏—Å–∞–Ω–∏–µ:\n"
        "1D ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è)\n"
        "2D ‚Äî –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω–æ–π —Å–µ—Ç–∫–µ (Ker, LenNOD)\n"
        "–í—ã—Ä–∞–∂–∞—é –æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è–º - –ü–æ–ø–æ–≤–æ–π –û–ª—å–≥–µ –∏ –ü–æ–ø–æ–≤—É –°–µ–º–µ–Ω—É "
        "–∑–∞ —Ö–æ—Ä–æ—à–µ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ, –∑–∞–±–æ—Ç—É, –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ï—â–µ —Ä–∞–∑ –±–ª–∞–≥–æ–¥–∞—Ä—é –≤–∞—Å –æ—Ç –≤—Å–µ–≥–æ —Å–µ—Ä–¥—Ü–∞ "
        "–∑–∞ –≤–∞—à—É –≤–µ—Ä—É –≤ –º–µ–Ω—è –∏ –≤–∞—à—É –Ω–µ–æ—Ü–µ–Ω–∏–º—É—é –ø–æ–º–æ—â—å."
    ))

    root.bind("<Control-F1>", lambda e: messagebox.showinfo(
        "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ",
        "–•—Ä–æ–º–æ–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "–í–µ—Ä—Å–∏—è 4.0\n\n"
        "–ê–≤—Ç–æ—Ä: –ì–æ–ª—É–±–µ–≤–∞ –ï.–°.\n"
        "–ì–æ—Ä–æ–¥: –ú–æ—Å–∫–≤–∞\n"
        "–ì–æ–¥: 2025\n\n"
        "–û–±—ä–µ–∫—Ç 1D:\n"
        "‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–µ–ª –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º –≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —É–∑–æ—Ä–æ–≤\n\n"
        "–û–±—ä–µ–∫—Ç 2D:\n"
        "‚Äî –∞–Ω–∞–ª–∏–∑ –ø–∞—Ä —á–∏—Å–µ–ª —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏\n\n"
        "–ú–æ–¥–µ–ª–∏:\n"
        "‚Äî Ker(x * y): —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—É–º–º–∞ —Ü–∏—Ñ—Ä –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è\n"
        "‚Äî LenNOD(x, y): –¥–ª–∏–Ω–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ï–≤–∫–ª–∏–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤)"
    ))

    root.mainloop()


